name: Deploy Application

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.prompt-builder.example.com

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster prompt-builder-staging \
            --service prompt-builder-api \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster prompt-builder-staging \
            --services prompt-builder-api \
            --region us-east-1

      - name: Health check
        run: |
          max_attempts=30
          attempt=0
          until curl -f https://staging.prompt-builder.example.com/health || [ $attempt -eq $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt/$max_attempts..."
            sleep 10
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
          echo "Deployment successful!"

      - name: Run smoke tests
        run: |
          curl -f https://staging.prompt-builder.example.com/health
          curl -f https://staging.prompt-builder.example.com/metrics

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [deploy-staging]
    environment:
      name: production
      url: https://prompt-builder.example.com

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create deployment marker
        run: |
          # Record deployment in monitoring system
          curl -X POST https://api.datadoghq.com/api/v1/events \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "Production Deployment Started",
              "text": "Deploying version ${{ github.ref_name }}",
              "tags": ["deployment", "production"],
              "alert_type": "info"
            }'

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment first
          aws ecs update-service \
            --cluster prompt-builder-production \
            --service prompt-builder-api-green \
            --force-new-deployment \
            --region us-east-1

          # Wait for green to be healthy
          aws ecs wait services-stable \
            --cluster prompt-builder-production \
            --services prompt-builder-api-green \
            --region us-east-1

      - name: Traffic shift
        run: |
          # Gradually shift traffic from blue to green
          # 10% canary
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,ForwardConfig='{
              "TargetGroups": [
                {"TargetGroupArn": "${{ secrets.BLUE_TG_ARN }}", "Weight": 90},
                {"TargetGroupArn": "${{ secrets.GREEN_TG_ARN }}", "Weight": 10}
              ]
            }'

          sleep 300 # 5 minutes monitoring

          # Check error rate
          ERROR_RATE=$(curl -s "https://api.datadoghq.com/api/v1/query?from=$(date -u -d '5 minutes ago' +%s)&to=$(date -u +%s)&query=sum:prompt_builder.errors{env:production}.as_rate()" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.DATADOG_APP_KEY }}" | jq '.series[0].pointlist[-1][1]')

          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "Error rate too high, rolling back"
            exit 1
          fi

          # 50% traffic
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,ForwardConfig='{
              "TargetGroups": [
                {"TargetGroupArn": "${{ secrets.BLUE_TG_ARN }}", "Weight": 50},
                {"TargetGroupArn": "${{ secrets.GREEN_TG_ARN }}", "Weight": 50}
              ]
            }'

          sleep 300

          # 100% traffic to green
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ secrets.GREEN_TG_ARN }}

      - name: Cleanup old blue deployment
        if: success()
        run: |
          # Scale down blue deployment
          aws ecs update-service \
            --cluster prompt-builder-production \
            --service prompt-builder-api-blue \
            --desired-count 0 \
            --region us-east-1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back to blue"
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ secrets.BLUE_TG_ARN }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Notify deployment complete
        if: success()
        run: |
          curl -X POST https://api.datadoghq.com/api/v1/events \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "Production Deployment Complete",
              "text": "Successfully deployed version ${{ github.ref_name }}",
              "tags": ["deployment", "production", "success"],
              "alert_type": "success"
            }'

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment FAILED - version ${{ github.ref_name }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
