version: '3.8'

services:
  # Backend API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prompt-builder-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - VITE_ANTHROPIC_API_KEY=${VITE_ANTHROPIC_API_KEY}
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
      - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
      - VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN}
      - VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET}
      - VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID}
      - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
      - CLAUDE_TIMEOUT_MS=30000
      - LOG_LEVEL=info
      - ALLOWED_API_KEYS=${ALLOWED_API_KEYS}
      - METRICS_TOKEN=${METRICS_TOKEN}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - FRONTEND_URL=${FRONTEND_URL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3
    networks:
      - prompt-builder-network
    labels:
      - "com.prompt-builder.service=api"

  # Redis cache service (optional, for distributed caching)
  redis:
    image: redis:7-alpine
    container_name: prompt-builder-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - prompt-builder-network
    labels:
      - "com.prompt-builder.service=redis"

  # Prometheus metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prompt-builder-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - prompt-builder-network
    labels:
      - "com.prompt-builder.service=prometheus"
    depends_on:
      - api

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: prompt-builder-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - prompt-builder-network
    labels:
      - "com.prompt-builder.service=grafana"
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  prompt-builder-network:
    driver: bridge
