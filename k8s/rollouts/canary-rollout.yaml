apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: prompt-builder-api
  labels:
    app: prompt-builder
spec:
  replicas: 5
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: prompt-builder
      component: api

  template:
    metadata:
      labels:
        app: prompt-builder
        component: api
    spec:
      # Same pod spec as deployment.yaml
      serviceAccountName: prompt-builder-api
      containers:
        - name: api
          image: ghcr.io/bharm16/prompt-builder:latest
          ports:
            - name: http
              containerPort: 3001
          envFrom:
            - configMapRef:
                name: prompt-builder-config
            - secretRef:
                name: prompt-builder-secrets
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5

  # Progressive delivery strategy
  strategy:
    canary:
      # Traffic management via service mesh or ingress
      canaryService: prompt-builder-api-canary
      stableService: prompt-builder-api-stable

      trafficRouting:
        nginx:
          stableIngress: prompt-builder-api
          additionalIngressAnnotations:
            canary-by-header: X-Canary

      # Canary deployment steps
      steps:
        # 1. Deploy canary with 5% traffic
        - setWeight: 5
        - pause: { duration: 5m }

        # 2. Run analysis
        - analysis:
            templates:
              - templateName: success-rate
              - templateName: latency
            args:
              - name: service-name
                value: prompt-builder-api-canary

        # 3. Increase to 20%
        - setWeight: 20
        - pause: { duration: 5m }

        # 4. Run analysis again
        - analysis:
            templates:
              - templateName: success-rate
              - templateName: latency

        # 5. Increase to 50%
        - setWeight: 50
        - pause: { duration: 10m }

        # 6. Final analysis
        - analysis:
            templates:
              - templateName: success-rate
              - templateName: latency
              - templateName: error-rate

        # 7. Increase to 80%
        - setWeight: 80
        - pause: { duration: 5m }

        # 8. Full rollout (100%)
        - setWeight: 100

      # Analysis templates
      analysis:
        templates:
          - templateName: success-rate
          - templateName: latency
          - templateName: error-rate
        startingStep: 2  # Start analysis after first pause

      # Auto-promotion configuration
      autoPromotionEnabled: false  # Require manual promotion
      autoPromotionSeconds: 0

      # Abort conditions
      abortScaleDownDelaySeconds: 30
      scaleDownDelaySeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: prompt-builder-api-stable
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app: prompt-builder
    component: api
---
apiVersion: v1
kind: Service
metadata:
  name: prompt-builder-api-canary
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app: prompt-builder
    component: api
